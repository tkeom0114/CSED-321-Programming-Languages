fst (1, true); 

match inl (int) 10 with inl a -> + (a, 5) | inr b -> - (b, 5);

(fun x : (unit + unit) -> match x with inl a -> true | inr a -> false) (inl (unit) ());

let f : int -> int = fun x : int -> x in f;

let rec sum : int -> int = fun x : int -> if (= (x, 1)) then 1 else + (x, sum (- (x, 1))) in sum 10;

let or : bool -> bool -> bool = fun x : bool -> fun y : bool -> if x then true else y in
let add : int -> int -> int = fun x : int -> fun y : int -> + (x, y) in
let sub : int -> int -> int = fun x : int -> fun y : int -> - (x, y) in
let rec fib : int -> int = fun x : int -> if or (= (x, 0)) (= (x, 1)) then 1 else add (fib (sub x 1)) (fib (sub x 2)) in
fib 10;

let rec evenOdd : ((int -> bool) * (int -> bool)) = 
(fun x : int -> if (= (x, 0)) then true else ((snd evenOdd) (- (x, 1))), fun x : int -> if (= (x, 0)) then false else ((fst evenOdd) (- (x, 1)))) in
(fst evenOdd) 18;

+ inl (int) false;

fix f : (int -> int) -> fun n : bool -> 3;

match inl (bool) 3 with inl a -> + (a, 1) | inr b -> b;

