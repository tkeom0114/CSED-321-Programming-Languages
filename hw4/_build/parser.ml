type token =
  | INT of (int)
  | ID of (string)
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | LESS
  | AND
  | OR
  | NOT
  | LPAREN
  | RPAREN
  | SKIP
  | COLONEQ
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | FI
  | WHILE
  | DO
  | END
  | LBRACE
  | RBRACE
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 35 "parser.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* STAR *);
  264 (* SLASH *);
  265 (* EQUAL *);
  266 (* LESS *);
  267 (* AND *);
  268 (* OR *);
  269 (* NOT *);
  270 (* LPAREN *);
  271 (* RPAREN *);
  272 (* SKIP *);
  273 (* COLONEQ *);
  274 (* SEMICOLON *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* WHILE *);
  280 (* DO *);
  281 (* END *);
  282 (* LBRACE *);
  283 (* RBRACE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\004\000\003\000\001\000\001\000\001\000\001\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\007\000\005\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\023\000\
\000\000\000\000\003\000\006\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\019\000\000\000\002\000\000\000\
\000\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\021\000\022\000\000\000\020\000"

let yydgoto = "\002\000\
\008\000\037\000\017\000"

let yysindex = "\017\000\
\053\255\000\000\005\255\000\000\001\255\001\255\053\255\000\000\
\011\255\001\255\000\000\000\000\000\000\000\000\001\255\001\255\
\099\255\075\255\245\254\007\255\141\255\088\255\130\255\001\255\
\001\255\001\255\001\255\001\255\001\255\001\255\001\255\053\255\
\053\255\053\255\000\000\005\255\000\000\126\000\000\000\020\255\
\020\255\000\000\000\000\083\255\083\255\088\255\107\255\016\255\
\250\254\000\000\053\255\000\000\000\000\251\254\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\255\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\134\000\000\000\000\000\000\000\001\000\
\024\000\000\000\000\000\058\000\075\000\092\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\036\000"

let yytablesize = 402
let yytable = "\009\000\
\008\000\011\000\012\000\013\000\014\000\019\000\034\000\011\000\
\036\000\013\000\014\000\034\000\034\000\015\000\016\000\035\000\
\055\000\001\000\053\000\015\000\016\000\010\000\004\000\009\000\
\000\000\005\000\026\000\027\000\020\000\006\000\048\000\049\000\
\007\000\034\000\000\000\018\000\051\000\052\000\018\000\018\000\
\007\000\018\000\018\000\000\000\018\000\021\000\000\000\000\000\
\000\000\054\000\022\000\023\000\000\000\000\000\003\000\038\000\
\000\000\012\000\000\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\004\000\000\000\000\000\005\000\
\000\000\000\000\013\000\006\000\000\000\000\000\007\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\024\000\
\025\000\026\000\027\000\014\000\024\000\025\000\026\000\027\000\
\028\000\029\000\033\000\000\000\000\000\000\000\015\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\000\000\
\039\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\008\000\000\000\
\000\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\000\000\000\000\008\000\000\000\008\000\008\000\008\000\000\000\
\008\000\008\000\000\000\008\000\009\000\009\000\000\000\000\000\
\009\000\009\000\009\000\009\000\000\000\000\000\009\000\000\000\
\000\000\009\000\000\000\009\000\009\000\009\000\000\000\009\000\
\009\000\000\000\009\000\007\000\007\000\000\000\000\000\007\000\
\000\000\000\000\007\000\000\000\007\000\007\000\007\000\000\000\
\007\000\007\000\000\000\007\000\012\000\012\000\000\000\000\000\
\012\000\000\000\000\000\012\000\000\000\012\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\013\000\013\000\000\000\
\000\000\013\000\000\000\000\000\013\000\000\000\013\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\014\000\014\000\
\000\000\000\000\014\000\000\000\000\000\014\000\000\000\014\000\
\014\000\014\000\015\000\014\000\014\000\015\000\014\000\000\000\
\015\000\000\000\015\000\015\000\015\000\000\000\015\000\015\000\
\000\000\015\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\004\001\007\000\018\001\001\001\
\002\001\003\001\004\001\018\001\018\001\013\001\014\001\027\001\
\022\001\001\000\025\001\013\001\014\001\017\001\016\001\000\000\
\255\255\019\001\007\001\008\001\018\001\023\001\032\000\033\000\
\026\001\018\001\255\255\018\001\021\001\022\001\021\001\022\001\
\000\000\006\000\025\001\255\255\027\001\010\000\255\255\255\255\
\255\255\051\000\015\000\016\000\255\255\255\255\002\001\020\000\
\255\255\000\000\255\255\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\255\255\016\001\255\255\255\255\019\001\
\255\255\255\255\000\000\023\001\255\255\255\255\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\005\001\
\006\001\007\001\008\001\000\000\005\001\006\001\007\001\008\001\
\009\001\010\001\024\001\255\255\255\255\255\255\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\005\001\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\255\255\
\255\255\018\001\255\255\020\001\021\001\022\001\255\255\024\001\
\025\001\255\255\027\001\011\001\012\001\255\255\255\255\015\001\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\255\255\
\024\001\025\001\255\255\027\001\011\001\012\001\255\255\255\255\
\015\001\255\255\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\024\001\025\001\255\255\027\001\011\001\012\001\255\255\
\255\255\015\001\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\255\255\024\001\025\001\255\255\027\001\011\001\012\001\
\255\255\255\255\015\001\255\255\255\255\018\001\255\255\020\001\
\021\001\022\001\012\001\024\001\025\001\015\001\027\001\255\255\
\018\001\255\255\020\001\021\001\022\001\255\255\024\001\025\001\
\255\255\027\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  LESS\000\
  AND\000\
  OR\000\
  NOT\000\
  LPAREN\000\
  RPAREN\000\
  SKIP\000\
  COLONEQ\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  WHILE\000\
  DO\000\
  END\000\
  LBRACE\000\
  RBRACE\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 22 "parser.mly"
                                ( (_1,_3) )
# 262 "parser.ml"
               : Imp.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 26 "parser.mly"
                            ( _2 )
# 269 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 27 "parser.mly"
                            ( Imp.Num _1 )
# 276 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "parser.mly"
                            ( Imp.Bool true )
# 282 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 29 "parser.mly"
                            ( Imp.Bool false )
# 288 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 30 "parser.mly"
                            ( Imp.Var _1 )
# 295 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                            ( Imp.Not _2 )
# 302 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                            ( Imp.Add(_1,_3) )
# 310 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                            ( Imp.Sub(_1,_3) )
# 318 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                            ( Imp.Mul(_1,_3) )
# 326 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                            ( Imp.Div(_1,_3) )
# 334 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                            ( Imp.Eq(_1,_3) )
# 342 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                            ( Imp.Less(_1,_3) )
# 350 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                            ( Imp.And(_1,_3) )
# 358 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                            ( Imp.Or(_1,_3) )
# 366 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 43 "parser.mly"
                                        ( _2 )
# 373 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 44 "parser.mly"
                                        ( Imp.Skip )
# 379 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                                        ( Imp.Assign(_1,_3) )
# 387 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 46 "parser.mly"
                                        ( Imp.Seq(_1,_3) )
# 395 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
                                        ( Imp.If(_2,_4,_6) )
# 404 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 48 "parser.mly"
                                        ( Imp.If2(_2,_4) )
# 412 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                                        ( Imp.While(_2,_4) )
# 420 "parser.ml"
               : 'stmt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Imp.program)
;;
